function Model = MODEL_SRF_VC_SL(MMC,Cv_sl)
    % Model for the Voltage-COntrolled, Single-loop MMC
    % MMC -> Structure with the MMC's parameters
    % CTRL -> Structure with the control parameters

    % Definitions
    I = eye(3);                         % Identity matrix
    s = tf('s');                        % Complex frequency
    Ceq = MMC.C/MMC.N;                  % Equivalent capacitance
    
    
    %Z = MMC.L*s + MMC.R;                % Inner Impedance
    %Zf = MMC.Lf*s + MMC.Rf;             % Outer Impedance
    W = [0 -MMC.w0 0;MMC.w0 0 0;0 0 0]; % Coupling Matrix
    sdq = W + s.*I;                     % Matrix frequency
    Zdq = MMC.R*I + MMC.L*sdq; % Inner Impedance
    Zfdq = MMC.Rf*I + MMC.Lf*sdq; % Outer Impedance
        
    Cv_dq = [Cv_sl 0 0;0 Cv_sl 0;0 0 0];% Controller
    
    % Some ajustments to fit in the screem
    Vdc0 = MMC.Vdc0;   
    SN = MMC.SN;  
    Cf = MMC.Cf;
    
    % Model
    Gamma_in = 4*Ceq*sdq*(Zdq+2*Zfdq) + I;
    
    Y_in = (4*Vdc0*Ceq*sdq + I*2*SN/(3*Vdc0))*Cv_dq + 8*Ceq*sdq;
    Z_in = inv(Y_in); % Equation (2.69) of the thesis

%     Z_vsl_in_ns = inv((4*Vdc0*Ceq*sdq + I*2*SN/(3*Vdc0))*Gvdqsl + 8*Ceq*sdq);
    
    Gamma_out = Cf*Z_in*Gamma_in*sdq + I;
    Gamma_out_2 = Cf*Z_in*(Gamma_in*sdq) + I;
    
    
    
    %Gamma_vsl_out_ns = Cf*Z_vsl_in_ns*Gamma_vsl_in*sdq + I;
    
    %Gamma_vsl_out_inv_ns = (inv(Gamma_vsl_out_ns));
    Gamma_out_inv = inv(Gamma_out);
    Gamma_out_inv_2 = inv(Gamma_out_2);
    
    
    
    %Z_sl_th_1_ns = (Z_vsl_in_ns*Gamma_vsl_in);
    
    
    
%     Z_sl_th_ns = (Gamma_vsl_out_inv_ns*Z_sl_th_1_ns);
%     G_sl_th_1_ns = ((4*Vdc0*Ceq*sdq + I*2*SN/(3*Vdc0))*Gvdqsl);
%     G_sl_th_2_ns = (Z_vsl_in_ns*G_sl_th_1_ns);
%     G_sl_th_ns = (Gamma_vsl_out_inv_ns*G_sl_th_2_ns);
%     
%     Gamma_vsl_out_ns2 = Cf*Z_vsl_in_ns*(Gamma_vsl_in*sdq) + I;
%     Gamma_vsl_out_inv_ns2 = (inv(Gamma_vsl_out_ns2));
%     Z_sl_th_ns2 = Gamma_vsl_out_inv_ns2*Z_sl_th_1_ns;
%     
%     Zth = s*Cv_sl;
%     Gth = 1;

    % Output structure
    Model = struct('Gamma_in',Gamma_in,...
                   'Y_in',Y_in,...
                   'Z_in',Z_in,...
                   'Gamma_out',Gamma_out,...
                   'Gamma_out_2',Gamma_out_2,...
                   'Gamma_out_inv',Gamma_out_inv,...
                   'Gamma_out_inv_2',Gamma_out_inv_2);

end